
【1】功能测试：
1、参与需求评审
2、输出测试方案
3、编写测试用例
4、组织用例评审——书写测试计划和测试执行集
5、参与需求测试
6、提交bug、跟踪bug解决进度
7、配合产品、设计进行验收
8、测试完成，输出测试总结报告

【11】测试流程
需求测试->概要设计测试->详细设计测试->单元测试->集成测试->系统测试->验收测试  来自W模型
搭建测试环境 撰写测试用例 执行测试用例 写测试计划，测试报告 测试，
并提交BUG表单 跟踪bug修改情况 执行自动化测试，编写脚本，执行，分析，报告 
进行性能测试，压力测试等其他测试，执行，分析，调优，报告

【2】测试微信的软件1.0版本
输入文本测试点：输入中英文、数字、符号、表情等各种类型的文本，测试是否能够正确输入并显示；
字数限制测试点：输入200字及以下、201字及以上的文本，测试是否能够正确限制字数；
界面响应测试点：测试在输入文本时，是否会出现闪退、卡顿、界面错位等异常情况；
显示效果测试点：测试文本的显示效果，包括字体、字号、颜色等是否符合要求；
输入边界测试点：测试输入空格、回车、换行等边界情况是否正确处理；
输入速度测试点：测试用户快速输入文本时，是否会出现丢字、串字等异常情况；
输入撤销测试点：测试是否支持输入撤销功能；
输入复制测试点：测试是否支持输入复制功能。
通过以上测试点的提取，可以设计并执行全面、高效、有效的测试用例，以验证该软件功能是否符合要求，从而提高软件的质量和用户体验。
【19】微信用户界面登陆过程都需要做哪些分析
1、功能测试：
	正确密码用户能正确登录；错误密码用户不能登录；登录用户成功后，能否正确跳转；登录失败后是否有错误提示
	用户名特殊字符和长度要求；密码长度和复杂度要求;太长如何处理，太短如何处理；什么都不输入登录
	注册功能、忘记密码功能、记住用户名和密码功能是否正确；验证码功能等链接是否正确
	不同登录方式进行登录（手机、微信、QQ、扫码）
2、UI测试：风格界面与UI设计一致；控件高度是否一致；颜色是否正确；文字简洁易懂
3、性能测试：登录页面加载时间合理；登录成功判断和跳转时间；模拟大量用户同时登陆，压力下能否正常登陆跳转
4、安全性测试：
	登录后生成的Cookie，是否是httponly ； 用户名和密码是否通过加密的方式发送给Web服务器；
	用户名和密码的验证，应该是用服务器端验证， 而不能单单是在客户端用javascript 验证
	用户名和密码的输入框，应该屏蔽SQL注入攻击；用户名和密码的的输入框，应该禁止输入脚本 （防止XSS攻击）
	防止暴力破解，检测是否有错误登陆的次数限制；
	是否支持多用户在同一机器上登录； 同一用户能否在多台机器上登录
5、可用性测试：是否可以全用键盘操作，是否有快捷键；输入用户名，密码后按回车，是否可以登陆；输入框能否可以以Tab键切换
6、兼容性测试：
	不同浏览器下能否显示正常且功能正常、显示正常且；不同的平台是否能正常工作，比如Windows、 Mac、移动设备上是否正常工作iphone, Andriod; 
	不同的分辨率下显示是否正常；不同语言环境显示正确

【20】微信点赞功能
一、功能测试
 1、点赞按钮功能正常；
 2、好友点赞提醒
 3、共同好友点赞提醒
      点赞列表增加用户
      点赞按钮变为已点赞
 4、取消点赞，点赞按钮、点赞列表、通知
 5、点赞用户是否在可见分组里
二、界面
 1、点赞按钮变化
 2、点赞显示是否正确，一行几个
 4、点赞是否按时间进行排序，头像对应的是否正确
三、性能测试
 1、网速快慢对其影响
 2、多人同时点赞，是否正确显示
 3、多用户同时取消点赞，是否正确显示
 4、弱网情况下点赞
四、安全性测试
 1、未登陆情况下是否有点赞提醒
五、兼容性测试
 1、安卓、苹果手机下的点赞提醒、显示
六、易用性测试
点赞功能和取消功能设计的是否符合人性化，更加舒适

【29】排查问题：击微博的关注图标但是app上面没有反应
1、检查网络原因，是否是手机断网
2、换其他设备对功能进行测试
3、抓包检查点击关注按钮后前端是否发出请求
4、抓包检查后端返回消息
5、如果是浏览器，刷新或清除缓存进入无痕模式再试

【21】如何测试一个杯子
一、功能：
 1、杯子直接装水是否漏水
 2、杯子装水到水位刻度线是否是刻度的容量
 3、杯子的盖子是否可以拧紧，拧紧之后倒立是否会漏水
 4、杯子如果是保温杯是否能保温；如果是普通杯子是否会烫手
二、性能：
 1、杯子能承受最高温度多少度
 2、杯子承受的最低温度多少度
 3、杯子盖子拧紧多少不会被倒出
 4、杯子的容量最大是多少不会溢出
 5、杯子的坚硬程度，从多高摔下或施加多大的力会损坏
 6、杯子的最大使用寿命
 7、杯子的保温时间有多长
三、安全性
 1、杯子的材质是否有毒
 2、杯子超过负荷后是否发生爆炸
 3、杯子低温高温材质是否释放有毒物质
四、界面
 1、杯子是否美观
 2、logo是否按照UI来设计的
 3、杯子的宽高是否与设计一样
 4、杯子的涂漆是否不易脱落
五、兼容性
 1、杯子是否可以转冰块、酒精、汽水等其他饮品或者液体
六、易用性
 1、杯子是否方便喝水
 2、杯子是否方便倒水
 3、杯子是否方便携带
 4、杯子是否防滑易抓取

【22】特殊验证
一、搜索框：结果正确，可翻页，可下拉，可排序
二、登录界面：忘记密码、注册、扫码登录
三、购物车：未登录将商品加入购物车或点击购物车菜单，页面跳转到登录页面，登录成功后购物车数量增加； 
	登录后所有链接是否跳转正确； 商品是否可以成功加入购物车；购物车商品总数是否有限制；商品总数是否正确；
	全选功能是否好用； 删除功能是否好用； 价格总计是否正确；商品文字太长时是否显示完整；店铺名字太长时是否显示完整；
	购物车中下架的商品是否有特殊标识；新加入购物车商品排序 ；商品删除后商品总数是否减少；购物车结算功能是否好用
【13】软件质量的六个特征
功能特征，易用特征，效率特征，可移植特征，可靠特征，可维护特征


【14】测试网络协议
1、一致性测试：检测协议实现本身与协议规范的符合程度 
2、互操作性测试：基于某一协议检测不同协议实现间互操作互通信的能力 
3、性能测试：检测协议实现的性能指标，比如数据传输速度，连接时间，执行速度，吞吐量，并发度， 
4、健壮性测试：检测协议是现在各种恶劣环境下运行的能力，比如注入干扰报文，通信故障，信道被切断

【10】自动化和手工的区别
手动测试:
缺点:
1.重复的手动测试，代价高
2.依赖于测试人员的能力。
优点:
1.可以依据测试人员的经验和对错误的猜测能力
2.测试人员具有审美能力和心理体验
3.测试人员具有逻辑推理能力和是非判断能力。
自动化测试:
优点:
1.减少时间和成本，提高资源利用率。
2.能够测试手动测试无法进行测试的板块
3.测试具有重复性、一致性和复用性
4.能够增加软件信任度。
缺点:
1.非常依赖测试质量
2.不能取代手动测试，查出的缺陷比手动测试更少
3.测试自动化不能提高有效性，还有可能制约软件开发
4.工具本身不具备想象力

【15】测开最重要的能力
业务分析能力：分析整体业务流程、分析被测业务数据、分析被测系统架构、分析被测业务模块、分析测试所需资源、分析测试完成目标；
缺陷洞察能力：一般缺陷的发现能力、隐性问题的发现能力、发现连带问题的能力、发现问题隐患的能力、尽早发现问题的能力、发现问题根源的能力；
团队协作能力：合理进行人员分工、协助组员解决问题、配合完成测试任务、配合开发重现缺陷、督促项目整体进度、出现问题勇于承担；
专业技术能力：掌握测试基础知识、掌握计算机知识、熟练运用测试工具；
逻辑思考能力：判断逻辑的正确性、对可行性逻辑分析、站在客观角度思考；
问题解决能力：技术上的问题、工作中的问题、沟通问题；
沟通表达能力：和技术人员、产品人员、上下级的沟通；
宏观把控能力：有效控制测试时间、有效控制测试成本、有效制定测试计划、有效进行风险评估、有效控制测试方向

【4】接口测试：
Postman：使用Authorization验证身份和Script来验证是否正确
JMeter：并发性能测试
SwaggerUI：后端封装接口展示给前端
BurpScrab：用于攻击web 应用程序的集成平台， 可以代理（类似中间人攻击）整个浏览器客户端对访问的结果和发送的请求进行修改
wireShark：抓包分析
fiddler如何mock数据：使用 Fiddler 的 Composer 功能可以创建和修改请求和响应，从而模拟服务器返回的数据。
    使用Mock服务工具：
        Mock.js：一个模拟JavaScript库，可以在前端模拟数据。
        Mirage.js：一个前端JavaScript框架，用于模拟API请求和响应。
        Nock：一个Node.js库，可以拦截和模拟HTTP请求。
    修改本地开发环境的代理设置：
        在本地开发环境中，可以使用代理服务器（如Nginx或Apache）来拦截请求并返回自定义的数据。
    使用浏览器插件：
        有些浏览器插件允许你拦截和修改网络请求，例如ModHeader。
    修改后端代码：
        如果你有权限修改后端代码，可以直接在后端服务中修改返回的数据。
    使用Postman或Curl进行测试：
        这些工具允许你发送HTTP请求并查看响应。你可以使用它们来测试你的mock数据。
    使用前端框架的Mock功能：
        许多现代前端框架（如React, Vue, Angular）有内置的mock数据功能。

【5】linux测试
1、查看CPU使用情况按照百分比降序排序：ps aux --sort=-%cpu
2、查看内存占用情况降序排序：ps aux --sort -rss
3、linux下查看进程: ps -A  ；ps -ef ≈ ps aux 列出所有进程的完整列表
4、linux常用命令grep [options]  [options]、find [path][options][expression]path、file [options] 文件名  options]
5、查看端口的进程：netstat –tunlp|grep 端口号  lsof -i:端口号  ；
6、df -h 查看是哪个挂在目录满了 ； 
7、lsof file_name 查看文件占用进程情况

【23】jMeter模拟高并发场景
吞吐量，平均响应时间
 1、对服务器进行压力测试、性能测试、接口测试
 2、对web进行压力测试
 3、Jmeter的用例格式为jmx文件，实际为xml格式
 4、线程组：模拟多个用户访问；线程数/Ramp-UP Period表示10个线程每间隔1s发送请求
 5、聚合报告，结果树：Sample(每个请求序号)、StartTime(请求时间)、ThreadName(线程名称)、Label(HTTP请求名称)、SampleTime(每个请求所花时间)

【9】黑盒白盒常用测试方法
黑盒：等价类划分法；边界值分析法；错误推测法；场景法；因果图法；正交实验设计法；判定表驱动分析法；功能图分析法。 
白盒：①静态：不需要执行代码，如文档测试、代码检查等。
         ②动态，一般需要执行代码，接口测试、覆盖率分析、性能分析、内存分析等；
	逻辑覆盖法：路径覆盖(所有程序路径跑一遍)、判断覆盖(所有if结果跑一遍)、
	条件覆盖(所有判断条件的取值跑一遍)、判断/条件覆盖(同时满足判断和条件覆盖)、
	条件组合覆盖(所有条件的组合跑一遍)。 
        白盒还有程序打桩法：用桩数据绕过验证或者数据服务。


【5】数据包在网络中传输过程
封装数据：发送方将要传输的数据划分为合适的数据包，并在每个数据包的头部加上必要的信息，如源地址、目的地址、协议类型等。
选择路由：在数据包被发送到网络时，路由器会将数据包传送到下一个跳点，直到数据包到达目的地。
路由器转发：路由器会根据目的地址和路由表选择合适的路径将数据包转发到下一个跳点。
到达目的地：数据包最终到达目的地，并被解封装还原成原始数据。
确认数据传输：目的方会发送确认消息给发送方，以确保数据包已经正确地传输到目的地。

【6】TCP与UDP的区别
TCP ：
面向连接：在通信前，必须先建立连接，通过三次握手建立可靠的通信通道，确保数据的可靠传输。
可靠性：通过确认、序列号、重传机制等，保证数据的可靠传输，如果数据包丢失或损坏，会自动重传。
流式传输：将数据视为连续的字节流，在发送端和接收端之间保持数据的顺序，不会产生数据的边界。
拥塞控制：TCP通过拥塞窗口、滑动窗口等机制来控制网络拥塞，避免网络过载。
UDP：
无连接：在通信前不需要建立连接，直接发送数据包，没有握手过程，因此传输效率较高。
不可靠性：UDP不保证数据的可靠传输，数据包可能会丢失或乱序，不提供重传机制。
报文传输：UDP将数据划分为数据报文，每个数据报文都有自己的边界，接收端可以正确解析每个数据报文。
适用场景：适用于实时性要求高的应用，如音视频传输、在线游戏等。
TCP和UDP各有优势，在不同的应用场景下选择合适的传输协议，例如，需要可靠传输和顺序性的数据可以选择TCP，而对实时性要求较高的数据可以选择UDP。

【24】Selenium+Python自动化测试对下拉菜单的定位
elenium定位元素：可以使用 ID、名称、CSS 选择器、XPath 等多种方式定位元素。
CSS 和 XPath 是两种不同的选择器语言，CSS 选择器更简洁，XPath 更灵活。
 1、通过selenium.webdriver.support.ui的Select进行定位
	from selenium.webdriver.support.ui import Select  
	Select(driver.find_element_by_id("gender")).select_by_index(1)  
	Select(driver.find_element_by_id("gender")).select_by_value("2")  
	Select(driver.find_element_by_id("gender")).select_by_visible_text("Male")  
	# Select只对</select><select>标签的下拉菜单有效
2、定位非</select><select>标签的下拉菜单
	drop_down = driver.find_element_by_css_selector("div#select2_contner > ul")  
	drop_down.find_element_by_id("li2_input_2").click() 

【25】appium-unittest和python提供的断言方式：
	assertNotEqual(first, second, msg=None)；
	assertIn(first, second, msg=None)
	assertNotIn(first, second, msg=None)
	assertIsInstance(obj, cls, msg=None)
	assertNotIsInstance(obj, cls, msg=None)
	assertIs(type(obj), cls)

【28】印象最深的bug
我的自动化ci里调用了agent的批处理文件，批处理文件呢是模拟了linux的操作复制文件并启动linux的脚本文件startup.sh
某日我发现，启动后的产品服务没法连接Oracle数据库，这当然得报给底层组件团队
结果组件团队说没有问题，然后iServer就是这个上层产品测试我的问题不复现
我测试之后发现用ci跑会复现，用手动启用linux的脚本文件就能连接不复现，我就怀疑是startup.sh脚本的问题。
然后我对脚本进行了打桩和输出调试，结果最后是研发团队在调试的时候加入了一个参数have_tty参数，意思是没有交互界面就不执行其中的某些脚本文件
交互界面have_tty交互界面

无法

【30】定位问题能够，但出现都能修改的时候出现更改意见分歧
CCB评审会议，一般SE(System Engineer)来定夺，以符合功能、安全性、性能、可测试性、可维护性的要求下尽量小的代价
我是mde+FO(Module Design Engineer)+普通程序员的身份，我写文档

【12】ip地址划分
A类地址：第一个字节的最高位为0，7位用于网络标识，剩下的24位用于主机标识。A类地址范围为1.0.0.0到126.0.0.0。
B类地址：10，14位，16位。B类地址范围为128.0.0.0到191.255.0.0。
C类地址：110，21位，剩下的8位用于主机标识。C类地址范围为192.0.0.0到223.255.255.0。
D类地址：用于多点广播地址，其第一个字节的最高位必须为1110，后面28位用于标识。D类地址范围为224.0.0.0到239.255.255.255。
E类地址：保留地址，其第一个字节的最高位必须为1111，后面28位用于标识。E类地址范围为240.0.0.0到255.255.255.255。

A类私有地址：10.0.0.0到10.255.255.255
B类私有地址：172.16.0.0到172.31.255.255
C类私有地址：192.168.0.0到192.168.255.255

【17】
0、字符串怎么判断是不是ip地址(32位+3位)
    根据.进行截断，split('.')，截断后数组有四个
    第1段数字1-255，第[2,4]段数字0-255
    每段数字0开头的为错，1个数字[0-9]，两个数字([1-9][0-9])，三个数字(1[0-9][0-9])|(2[0-4][0-9])|(25[0-5]))，后边重复三段(.(内容)){3}$
    使用正则:String ipRegEx = "^([1-9]|([1-9][0-9])|(1[0-9][0-9])|(2[0-4][0-9])|(25[0-5]))(\\.([0-9]|([1-9][0-9])|(1[0-9][0-9])|(2[0-4][0-9])|(25[0-5]))){3}$"
        ip_regex = r"^([1-9]|([1-9][0-9])|(1[0-9][0-9])|(2[0-4][0-9])|(25[0-5]))(\.([0-9]|([1-9][0-9])|(1[0-9][0-9])|(2[0-4][0-9])|(25[0-5]))){3}$"  # 只有一个/因为r是直接转

1、如何判断单向链表是否有环：快慢指针
2、如何判断两个链表是否相交：长度相差，长的指针先走差len
3、循环链表插入元素：两指针指向头尾连接，两个指针指向第1、2个
4、合并两个排序数组：merge函数，左右指针，三个while循环
5、最大子数组问题（时间复杂度最佳）：动态规划：开始到现在为止经过的所有子数组中的最大和，一个是到当前位置为止的最大子数组和
6、如何防止数组越界：检查传入参数的合法性；传递数组元素个数；数组越界时，打印出遍历数组的索引；使用try{ } catch(){ }
7、java默认排序方式：List几何，Collection.sort和Arrays.sort()是归并排序；小于32就是插入排序了
8、如何结合数组链表的优势：哈希表
10、AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP的补充和完善，横切技术减少代码冗余，Aspect切面（权限认证、日志、事务）
11、DispatcherServlet：？？？？？


【26】网络测试：
ping、traceroute、nslookup
稳定性：
    用 ping 命令连续发送数据包到特定服务器，并记录响应时间，以此来评估网络的稳定性。
网络延迟和丢包率测试：
    traceroute 命令可以帮助你测量数据包到达目标地址所经过的路径上的每一跳的延迟。

【】浏览器中输入网址会发生什么：  
1、查询DNS，获取域名对应的IP（DNS解析）
  （1）检查浏览器缓存、检查本地hosts文件是否有这个网址的映射，如果有，就调用，解析完成。  （黑客hosts文件readonly）
  （2）查找本地DNS解析器缓存是否有这个网址的映射，如果有，返回映射，解析完成。  
  （3）查找填写或分配的首选DNS服务器。服务器接收到查询时：  如果要查询的域名包含在本地配置区域资源中，返回解析结果，查询结束，此解析具有权威性。
  （4）如果本地DNS服务器也失效：
        不采用转发模式（迭代），本地DNS就把请求发至13台根DNS，根DNS服务器收到请求后，会判断这个域名（如.com）是谁来授权管理，并返回一个负责该顶级域名服务器的IP，本地DNS服务器收到顶级域名服务器IP信息后，
	继续向该顶级域名服务器IP发送请求，该服务器如果无法解析，则会找到负责这个域名的下一级DNS服务器的IP给本地DNS服务器，循环直至查询到映射，将解析结果返回本地DNS服务器
        采用转发模式（递归），则此DNS服务器就会把请求转发至上一级DNS服务器，如果上一级DNS服务器不能解析，则继续向上请求。
	最终将解析结果依次返回本地DNS服务器，本地DNS服务器再返回给客户机，查询完成。 

2、得到目标服务器的IP地址及端口号（http 80端口，https 443端口），会调用系统库函数socket，请求一个TCP流套接字。
   客户端向服务器发送HTTP请求报文：  
  （1）应用层：客户端发送HTTP请求报文。  
  （2）传输层：（加入源端口、目的端口）建立连接。实际发送数据之前，三次握手客户端和服务器建立起一个TCP连接。  
  （3）网络层：（加入IP头）路由寻址。  
  （4）数据链路层：（加入frame头）传输数据。  
  （5）物理层：物理传输bit。 
3、服务器端经过物理层→数据链路层→网络层→传输层→应用层，解析请求报文，发送HTTP响应报文。 
4、关闭连接，TCP四次挥手。 
5、客户端解析HTTP响应报文，浏览器开始显示HTML 





【35】设计模式：设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结（代码复用、代码健壮性、可靠性、可读性）
    单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点，避免一个全局使用的类频繁的创建和销毁，节省系统资源，提高程序效率。 
    简单工厂模式：定义一个用于创建对象的接口或抽象类，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到其子类
    装饰器模式：允许向一个现有的对象添加新的功能，同时又不改变其结构，以在不使用创造更多子类的情况下，将对象的功能加以扩展。
    策略模式（Strategy Pattern）：定义了一系列算法，将每个算法封装起来，使它们可以互相替换。
    观察者模式（Observer Pattern）：定义了一种一对多的依赖关系，当一个对象的状态发生改变时，其依赖的对象都会收到通知。
    适配器模式（Adapter Pattern）：将一个类的接口转换成客户希望的另一个接口，使得原本由于接口不兼容而不能一起工作的类可以一起工作。
    模板方法模式（Template Method Pattern）：定义了一个操作中的算法框架，将一些步骤的实现延迟到子类中。
    建造者模式（Builder Pattern）：将一个复杂对象的构建与表示分离，使同样的构建过程可以创建不同的表示。
    原型模式（Prototype Pattern）：通过复制现有对象来创建新对象，而不是通过实例化对象来创建。
    责任链模式（Chain of Responsibility Pattern）：将请求的发送者和接收者解耦，使多个对象都有机会处理该请求，直到有一个对象处理它为止。

【36】单例模式的实现


【37】分布式和集群
分布式：是指将不同的业务分布在不同的地方
 集群：是指将几台服务器集中在一起，实现同一业务。  
分布式中的每一个节点，都可以做集群，而集群并不一定就是分布式的。
集群有组织性，一台服务器垮了，其它的服务器可以顶上来，而分布式的每一个节点，都完成不同的业务，一个节点垮了，这个业务就不可访问了。

【38】hadoop集群


【39】您能详细描述一下您在搭建和维护 iServer 产品 Java 接口自动化框架时使用的关键技术和工具吗？
答：Selenide和Selenium WebDriver用于WebUI的操作执行以及测试，TestNG用于管理运行测试方法，图片对比的
	<configuration>、<suiteXmlFiles>动态指定xml文件路径
	TestNG更丰富的注解：Suite类自定义测试套件@BeforeSuite、@AfterSuite（分组、分类执行group packages）
	@DataProvider参数化设置，运行不同的路径，和不同的参数引擎，原本是使用dom4j来读取xml
	com.sun.jersey使用jersey-client来执行ClientResponse response = HttpAssert.getClientResponse("POST", uri, requestEntity);   return response.getEntity(String.class);

【40】您在 iDektopX 产品中使用的 Python UI 自动化框架有哪些特点？您是如何确保框架的稳定性和可维护性的？
	基于 Python 语言，使用了PyAutoGUI、opencv、cnocr、内建assert 等库。为了确保框架的稳定性，我编写了详细的文档，并定期进行代码审查和重构。
	图像识别：使用OpenCV+pythonAutoGUI等库对图像进行预处理，如灰度化、二值化、去噪等，以提高OCR的识别率。
		预处理图像：template = cv2.imread(url + '{}.png'.format(word), cv2.IMREAD_GRAYSCALE)
		模板匹配：template = cv2.imread(url + '{}.png'.format(word), cv2.IMREAD_GRAYSCALE)  
		screenshot = pyautogui.screenshot(region=(region['x'], region['y'], region['width'], region['height'])) 
		res = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED) 
	文字识别：尝试使用不同的预训练模型或调整OCR的识别参数（如检测阈值、识别阈值等）
		ocr = PaddleOCR(use_angle_cls=False, lang="ch")
		screenshot = pyautogui.screenshot(region=(region_point['x'], region_point['y'], region_point['width'] - i, region_point['height'] - i))  
		result = ocr.ocr(np.array(screenshot), cls=True)
	页面操作：PyAutoGUI.moveTo、doubleClick、scroll、click、hotkey、copy
	断言判断：Pytest @pytest.fixture()  @pytest.mark.parametrize("test_input, expected", [("3+5", 8), ("4+5", 8)])

【41】您在构建自动化测试框架时，是如何集成到 CI/CD 流程中的？请分享一些您在这一过程中遇到的挑战和解决方案。
	使用TeamCity，配置Agent，第一步清除临时文件，
	使用shell环境编写批处理文件来调用 批处理文件调用 PuTTY 来执行远程服务器上的 Shell 脚本
	shell脚本中配置了删除已有包，关闭需要使用的接口进程，解压包，书写配置文件，替换文件，运行包
	ui自动化Testng作为第三步骤，来启动并初始化新包，最后执行testng中的用例setup_module、teardown_module
    
【42】Jemeter怎么用：
	新建测试计划，新建线程组-设置线程数-循环次数，创建Random接口之类都行
	创建HeaderManager、创建HTTP执行的线程，放入Assertion进行断言判断响：应时间断言、JSON 断言、模式匹配是否包含内容
	添加监听的聚合reporter、响应时间图、结果数据图；监听cpu和memory

【43】接口自动化的覆盖率统计？SonarQube接口查看研发统计，
	(1)获取全量接口：通过Swagger、API文档或其他方式获取系统所有接口的列表。
	(2)记录调用接口：在测试用例执行过程中，记录被调用的接口。
	(3)计算覆盖率：被调用接口数量 / 总接口数量 * 100%
	代码覆盖率、方法覆盖率、条件覆盖率、分支覆盖率、路径覆盖率

【44】SQL语句：
SELECT 学生号, COUNT(*) AS 学生人数 FROM 学生表 GROUP BY 年级 ORDER BY 学生号 ASC; DESC
person表中重复的email，表A中id出现三次以上

【45】get和post的区别
（1）用途：
	GET：用于请求从服务器检索特定资源。GET请求应该只用于获取数据，而不会导致服务器上的状态改变。
	POST：用于向服务器提交要处理的数据，比如表单提交。POST请求可能会导致服务器上的状态改变。
（2）数据传输
	GET：数据通过URL传递，作为请求的一部分。数据附加在URL之后，通常使用查询字符串参数。
	POST：数据包含在请求体中，不会显示在URL中。
（3）数据大小限制
	GET：由于数据附加在URL中，因此受到URL长度限制，通常限制在2048个字符以内。
	POST：没有大小限制，因为数据包含在请求体中，可以传输大量数据。
（4）安全性：
	GET：由于数据暴露在URL中，因此不安全，不适合传输敏感信息。
	POST：数据包含在请求体中，相对更安全，适合传输敏感信息。
（5）缓存：
	GET：请求可以被缓存，这意味着相同的GET请求可以被重复使用，提高效率。
	POST：请求不会被缓存，因为通常涉及到修改服务器状态。

【46】加载一个页面url的过程
(1)解析URL：
	浏览器首先解析输入的URL，确定协议类型（如http或https）、主机名（域名）、端口（默认是80或443）、路径和查询字符串。
(2)DNS查询：
	如果浏览器缓存中没有该域名的IP地址，它会使用DNS（域名系统）协议向DNS服务器发起查询，将域名解析为IP地址。
(3)建立TCP连接传输报文：
	浏览器使用解析得到的IP地址，通过TCP（传输控制协议）与服务器建立连接。这通常涉及一个三次握手过程。
(4)TLS/SSL握手（如果是HTTPS）：
	如果URL以https开头，浏览器会通过TLS（传输层安全协议）或SSL（安全套接层）协议与服务器进行安全握手，该过程包括：
	服务器发送其证书给浏览器。览器验证证书的有效性。浏览器和服务器协商加密算法和密钥。
(5)发送HTTP请求：
	浏览器构建一个HTTP（超文本传输协议）请求消息，发送到服务器。请求包括请求行（如GET /index.html HTTP/1.1）、请求头和可能的请求体。
(6)服务器处理请求：
	服务器接收到HTTP请求后，根据请求的资源进行处理，可能涉及查询数据库、执行服务器端脚本等。
(7)返回HTTP响应：
	服务器处理完请求后，会发送一个HTTP响应消息回浏览器，包括状态行、响应头和响应体（通常是HTML文档）。
(8)下载页面资源:
	解析HTML解析、html文件、CSS文件、JavaScript文件、图片
(9)页面渲染：
	浏览器开始解析返回的HTML文档，构建DOM树，然后加载和解析CSS样式，执行JavaScript代码，最终渲染页面。
(10)JavaScript执行：
	页面中的其他资源，如图片、视频、JavaScript文件和CSS文件等，会通过额外的HTTP请求加载。
(12)关闭连接，呈现页面

【47】线程和进程的区别
（1）定义：
	进程：进程是操作系统进行资源分配和调度的基本单位。它是应用程序运行的实例，拥有独立的内存空间。
	线程：线程是进程中的一个实体，是被系统独立调度和分派的基本单位。线程自身不拥有系统资源，只拥有一点在运行中必不可少的资源，但它可以与同属一个进程的其他线程共享进程所拥有的全部资源。
（2）资源拥有：
	进程：每个进程都有自己的一套独立的地址空间，一般来说，进程间的资源是不共享的。
	线程：同一进程内的线程共享进程的地址空间和资源，如内存、I/O、CPU等。
（3）执行：
	进程：在执行过程中，每个进程都有一个程序运行的入口、顺序执行序列和程序执行完毕后的退出点。
	线程：线程是进程的一部分，线程自身不独立执行，它依赖于进程的执行，线程是进程中执行的最小单元。
（4）并发性：
	进程：在多进程模式中，进程的并发性是通过在不同进程间切换来实现的。
	线程：线程的并发性是由进程的并发性衍生出来的，多线程可以提高程序的并发度，使得多个线程可以在一个进程中并行执行。
（5）系统开销：
	进程：创建和销毁进程的开销相对较大，因为涉及到系统资源的分配和回收。
	线程：创建和销毁线程的开销相对较小，因为线程可以共享进程的资源，不需要重复分配。
（6）通信方式：
	进程：进程间通信（IPC）需要特定的机制，如管道、消息队列、共享内存、信号量等。
	线程：线程间可以直接读写进程数据段（如全局变量）来进行通信，因为它们共享相同的内存空间。
（7）独立性：
	进程：进程是独立的运行单位，一个进程崩溃不会直接影响到其他进程。
	线程：线程之间是相互依赖的，同一进程下，一个线程崩溃可能会影响到其他线程。

【48】线程之间的通信方式
    同步方法或同步块： 使用 synchronized 关键字来确保一次只有一个线程可以执行特定的代码段。
    锁（Locks）： Java 并发 API 提供了多种锁机制，如 ReentrantLock，用于更细粒度的线程同步。
    等待/通知机制： 使用 wait(), notify(), 和 notifyAll() 方法来实现线程间的协调。
    volatile 关键字： 确保变量的更改对所有线程立即可见。
    原子变量： 如 AtomicInteger，提供了一种无需使用同步就能进行原子操作的方式。
    线程安全集合： 如 ConcurrentHashMap，提供了线程安全的集合操作。
    交换器（Exchanger）： 允许两个线程在相遇时交换数据。
    信号量（Semaphore）： 控制对有限资源的访问。

【52】什么是死锁，如何预防死锁
（1）互斥条件：资源不能被多个进程同时使用，只能由一个进程独占。
（2）占有和等待条件：进程至少持有一个资源，并且正在等待获取其他进程持有的资源。
（3）不可抢占条件：进程已经获得的资源不能被其他进程强行夺走，只能由占有资源的进程自愿释放。
（4）循环等待条件：存在一个进程等待的资源序列，这个序列中的每个进程都持有下一个进程所需的至少一个资源。
银行家算法，通过预先计算资源分配的安全性来避免死锁。死锁检测和恢复，请求超时

【53】python中迭代器有什么用
支持惰性计算：迭代器支持惰性计算（lazy evaluation），这意味着元素的生成和处理可以按需进行，从而节省内存和计算资源。
支持for循环：迭代器使得集合对象能够直接用在for循环中，提供了一种简洁的遍历语法。
支持无限序列：迭代器可以用来创建无限序列，例如生成无限随机数序列或者斐波那契数列。
支持链式调用：迭代器可以与生成器表达式、map()、filter()等函数结合使用，实现复杂的数据处理流程。
支持迭代器协议：Python中的迭代器遵循迭代器协议，这意味着任何实现了__iter__()和__next__()方法的对象都可以作为迭代器使用。
提高性能：对于大型数据集合，使用迭代器可以提高性能，因为它不需要一次性将所有元素加载到内存中。
支持反向迭代：迭代器协议也支持反向迭代，通过__reversed__()方法，可以反向遍历集合。
与迭代器相关的内置函数：如next()、iter()和all()、any()等，它们可以与迭代器配合使用，提供更多的便利。

【54】python用过哪些库
requests：简单易用的HTTP库，用于发送网络请求。
BeautifulSoup：解析HTML和XML文档的库
Pillow（PIL）：图像处理库
pytest：第三方测试框架，比unittest更简洁灵活。
NumPy：支持大量的维度数组和矩阵运算，是科学计算的基础库。
Pandas：提供高性能、易用的数据结构和数据分析工具。

【55】k8s以及网络实现，docker
Docker 容器有四种状态：运行、已停止、重新启动、已退出
Docker优点：部署方便、部署安全、隔离性好、快速回滚、成本低、管理成本更低。
Docker缺点：隔离性不如虚拟机、性能问题可能在高并发时成为瓶颈。
docker run；docker build；docker images；docker ps；docker stop 和 docker start；docker rm；docker rmi


【57】实现索引的数据结构是什么？详细讲一下B+树和B树



【spring】
【】Java垃圾回收机制和怎么创建线程
【】讲一讲反射机制的原理，你什么时候会用到反射。
Class.forName()；动态加载字节码文件得到得到一个对象， 
在JDBC加载驱动
还有就是TestNG的@DataProvider注解或者监听器等。 

【】了解Spring框架吗？
依赖注入DI：减少代码耦合性
面向切面编程AOP：日志记录、事务管理之类与业务逻辑分离
 IOC容器：设计模式将对象的实例化交给容器(比如Spring)来完成，降低耦合。实现的方式是applicationContext.xml里新建一个bean标签，再 ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");拿到对象。 AOP动态增强切点方法（三种Advice增强）。 
设计模式：工厂（BeanFactory或ApplicationContext来创建bean对象）、适配器（Spring AOP中的增强或通知，不同的Advice类型适配成统一的方法拦截器）、装饰器（数据库连接事务管理、连接池）、观察者（ApplicationEvent和ApplicationListener接口，允许bean监听和响应应用程序事件）、单例模式（ConcurrentHashMap）

【10】java中线程安全相关的容器；
在Java中，线程安全的容器是那些设计用来在多线程环境中安全使用的集合。以下是一些Java中线程安全的容器：

ConcurrentHashMap：它是HashMap的线程安全版本，适用于高并发读写的场景。在JDK 1.7中，它通过分段锁来提高并发性能，而在JDK 1.8中，它使用CAS操作和synchronized来保证线程安全，同时提高了性能。ConcurrentHashMap允许null键和null值，与Hashtable相比，它在高并发环境下具有更好的性能和可伸缩性
CopyOnWriteArrayList：这是一个线程安全的List实现，适用于读多写少的场景。它通过在每次修改时复制底层数组来实现线程安全，从而保证了迭代器的一致性，但写操作的性能较低
ConcurrentSkipListMap：这是一个线程安全的有序映射表，使用跳表（Skip List）作为其底层数据结构，提供了有序的键值存储和高效的范围查询能力
ConcurrentLinkedQueue：这是一个基于链接节点的无界线程安全队列，它使用CAS操作实现，是一个非阻塞队列，适合高并发场景
BlockingQueue：这是一个接口，提供了多个线程安全的阻塞队列实现，如ArrayBlockingQueue和LinkedBlockingQueue。当队列为空时，获取元素的操作会被阻塞；当队列满时，添加元素的操作会被阻塞。它们非常适合用于生产者-消费者场景
ConcurrentLinkedDeque：这是一个线程安全的双端队列，支持在队列的两端进行插入和删除操作，使用链表作为其底层数据结构
PriorityBlockingQueue：这是一个支持优先级的无界阻塞队列，使用可重入锁ReentrantLock进行并发控制，可以指定元素排序规则

【11】字符串转换，排序
    将其他对象转换为字符串：
        使用 String.valueOf() 方法可以将对象转换为字符串。
        使用对象的 toString() 方法也可以得到对象的字符串表示。
    将数字转换为字符串：
        Integer.toString(int i)：将整数转换为字符串。
        Double.toString(double d)：将浮点数转换为字符串。
    将字符串数组转换为字符串：
        使用 String.join() 方法可以将字符串数组连接成一个字符串。
        使用 StringBuilder 或 StringBuffer 也可以实现数组到字符串的转换。
    对字符串数组进行排序：
        使用 Arrays.sort() 方法可以对字符串数组进行自然顺序排序。
        使用 Collections.sort() 方法可以对字符串列表进行自然顺序排序。
    自定义排序：
        传递一个 Comparator 实现到 Arrays.sort() 或 Collections.sort() 方法可以实现自定义排序。
    字符串大小写转换：
        使用 original.toLowerCase();original.toUpperCase();


【10】hashmap和treemap的区别
    内部数据结构：
        HashMap：基于哈希表实现，它存储键值对并且允许使用 null 键和值。HashMap 不保证映射的顺序。
        TreeMap：基于红黑树（一种自平衡的二叉搜索树）实现。它按照键的自然顺序或者自定义比较器（Comparator）定义的顺序来排序存储的键值对。
    排序：
        HashMap：不保证元素的顺序，每次迭代HashMap时元素的顺序可能会不同。
        TreeMap：保证了元素的排序，迭代时元素按照排序顺序返回。
    性能：
        HashMap：通常提供更好的性能，因为它的查找和插入操作的时间复杂度接近 O(1)。
        TreeMap：性能略逊于 HashMap，因为红黑树结构需要维护元素的排序，所以插入和查找操作的时间复杂度为 O(log n)。
    访问模式：
        HashMap：适合于快速查找的场景，不适合有序遍历。
        TreeMap：适合于需要有序遍历的场景，比如按顺序获取元素。
    键的顺序：
        HashMap：不保证任何顺序。
        TreeMap：可以保证按键的自然顺序或定制的顺序。
    对于键值对的要求：
        HashMap：允许一个键（key）对应多个值（value），即可以有重复的键。
        TreeMap：每个键都是唯一的，不允许重复的键。
    对于 null 的支持：
        HashMap：允许键或值为 null。
        TreeMap：不允许键为 null，但可以有值为 null（如果初始化时没有提供比较器）。
    并发性：
        HashMap：非线程安全的，但在并发环境下可以通过 Collections.synchronizedMap 方法来包装。
        TreeMap：同样非线程安全，但也可以被同步包装。
    实现：
        HashMap：实现了 Map 接口。
        TreeMap：实现了 SortedMap 接口，SortedMap 是 Map 接口的子接口。


【9】java创建线程的方式；
（1）继承Thread类：extends Thread
（2）实现Runnable接口：implements Runnable
（3）实现Callable接口：implements Callable<String>
（4）使用ThreadFactory：implements ThreadFactory 
（5）使用线程池


【8】重写和重载的区别
(1)重写（Override）
重写是指在派生类（子类）中重新定义基类（父类）中已有的方法。它的目的是改变父类方法在子类中的行为。以下是重写的特点：
    方法名、参数列表、返回类型必须与父类中被重写的方法完全相同。
    访问修饰符不能比父类中的方法更严格。访问级别更松。
    异常：子类方法抛出的异常不能比父类方法声明的异常更宽泛。
运行时多态多态，即在运行时根据对象的实际类型来决定调用哪个类的方法。
(2)重载（Overload）
重载是指在同一个类中存在多个同名方法，但它们的参数列表不同。参数列表不同可以是参数的类型不同、参数的数量不同，或者两者都不同。以下是重载的特点：
    方法名必须相同。
    参数列表必须不同（参数的数量、类型或顺序不同）。
    返回类型可以不同，也可以相同。
    访问修饰符可以不同。
重载是编译时多态的一个例子，即在编译时根据方法的签名（方法名和参数列表）来决定调用哪个方法。

【7】封装、继承和多态：
    封装：
        隐藏内部实现细节，保护数据不被外部直接访问。
        提高代码的可维护性和重用性。
        减少系统中的错误。
    继承：重写父类方法
        代码重用、类之间层次结构、扩展性
    多态：允许不同类的对象对同一消息做出响应的能力
        接口统一：不同的对象可以通过相同的接口进行交互。
        扩展性：可以在不修改现有代码的情况下引入新的对象类型。
        灵活性：代码更加灵活，易于维护和扩展。


【】常见排序算法的时间复杂度，较好的空间复杂度的算法是哪个？ 说说希尔排序的原理，冒泡排序的原理。 

如何判断一个字符串是否是数字？
Integer.parseInt() ;Byte[]b=str.getBytes();Math.floor();
str.matches("^[-+]?\\d*\\.?\\d+$");


（1）字符串切割排序
（2）二叉数组两个数加在一起=某个值


【】软件分类
    致命缺陷（Fatal）：这类缺陷会导致系统主要功能完全丧失，用户数据受到破坏，系统崩溃、悬挂或死机，甚至可能危及人身安全。这类缺陷通常需要立即解决。
    严重缺陷（High/Critical）：严重缺陷可能不会立即导致系统崩溃，但它们会导致系统的主要功能部分丧失，数据不能保存，或者系统的次要功能完全丧失，显著影响系统所提供的功能或服务。
    一般缺陷（Medium/Major）：这类缺陷影响系统的次要功能，但不影响用户正常使用系统。例如，提示信息不准确或用户界面不佳等问题。
    较小（Low/Minor）：UI美观问题、布局不整齐、颜色不协调
    安全相关缺陷：任何与系统安全性相关的缺陷都被认为是严重的，因为它们可能允许未授权访问或数据泄露。
    性能缺陷：如果软件的性能问题严重影响用户体验，例如响应时间过慢或系统频繁崩溃，这些缺陷也被认为是严重的。
    合规性缺陷：违反法律法规或行业标准的缺陷，如隐私政策违规或不符合特定行业标准，通常被认为是严重的。
    关键功能缺失：如果软件缺少关键功能或这些功能无法使用，这会严重影响用户使用软件的能力，因此被视为严重缺陷。
    数据完整性问题：任何导致数据丢失、损坏或不一致的缺陷都是严重缺陷，因为它们可能对业务运营产生重大影响。

.ac 美团员工编号匹配，很简单的字符串校验。
2.ac 给出一个字符串，R、G、B代表人，*代表路，#代表障碍，求每个人到另一个人最快几步。很简单的一维遍历。
3.80% a,b,c三个砖头，x个a可以合成一个b，y个b可以合成一个c。只能合成不能分。求最多可以组成多少套（abc各一个为一套）。
用的很直接的模拟判断，将转换为k个类型提取为一个方法，在里面进行判断，若可以则转换。后面优化用了全部转化为a再除以一套得到最大的可能套数，再逐渐减少去判断是否满足，但是最后没来得及提交代码。
后面复盘感觉可以用三维数组去dp。


【56】项目的难点在哪：
    TestNG生成的报告无法发布的问题，因为打包出来是一个整体，testng上获取json和xml其他人也看不懂
    使用前端解析并导出为一个长pdf的功能进行实现的。




【056】测试平台
首先公司是通过teamcity来进行CI的
有一个自动化测试展示大屏项目，负责展示研发的每个产品的TeamCity执行结果和自动化执行个数，
其次呢就是管理我们的自动化用例（自动化用例呢包括，用例id,方法名,URL,HTTP方法,请求体,预期结果）
自动化数据只有数据存放地址的表，显示数据存放的绝对地址，用于自动生成xml配置文件，便于产品的自动发布和使用数据，一般不会更改。
前端项目可以触发自动化执行，但执行的方式还是依赖TeamCity，执行完成会获取最后一次的执行状态，可以用前端或者teamcity手动触发也会因为打标签而自动触发
前端触发tag，发送到teamcity执行，teamcity会下载包，下载自动化测试框架，执行shell脚本，让被测对象自动配置、并初始化完成，执行UI自动化测试初始化包，
执行testng的分类测试完毕，输出自动化测试结果，从teamcity上获取执行数据并解析到我们的前端页面，再一键下载整个


覆盖核心功能-100%，手工用例有1000+，总体覆盖率50%左右；1000个

测试用例ID 方法名 前置条件	URL	HTTP方法	请求头	请求体	预期结果  参数1 参数2 参数3

代码里配置xml,不同的引擎，DataProvider的，快速写好，比较方便，用例管理你可以在前端新增，更改filer文件;
每一个用例，有执行步骤，每一个步骤都有一个关键字key，每一个；
解析

一个接口用例，调用接口，一个步骤，一个关键字(关键字对应不同的参数)，调用完接口，

List<TestCase> findAll();
public void executeTests() {
        List<TestCase> testCases = testCaseRepository.findAll();
        RestTemplate restTemplate = new RestTemplate();

        for (TestCase testCase : testCases) {
            ResponseEntity<String> responseEntity = executeRequest(testCase);
            if (isValidResponse(responseEntity, testCase)) {
                System.out.println("测试用例 " + testCase.getId() + " 通过");
            } else {
                System.out.println("测试用例 " + testCase.getId() + " 失败");
            }
        }
    }

    private ResponseEntity<String> executeRequest(TestCase testCase) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<String> entity = new HttpEntity<>(testCase.getRequestBody(), headers);
        ResponseEntity<String> responseEntity = restTemplate.exchange(
                testCase.getUrl(),
                HttpMethod.resolve(testCase.getHttpMethod()),
                entity,
                String.class
        );
        return responseEntity;
    }

    private boolean isValidResponse(ResponseEntity<String> responseEntity, TestCase testCase) {
        // 这里可以根据实际情况来验证响应是否符合预期
        String actualResult = responseEntity.getBody();
        return actualResult != null && actualResult.contains(testCase.getExpectedResult());
    }


import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

public class TeamCityRerunTest {

    private static final String TEAMCITY_URL = "http://your-teamcity-url";
    private static final String TEST_RERUN_ENDPOINT = TEAMCITY_URL + "/httpAuth/app/rest/test/rerun";
    private static final String AUTH_HEADER_VALUE = "Basic " + "YourBase64EncodedCredentials"; // Replace with your encoded credentials

    public static void main(String[] args) {
        String testId = "testId"; // Replace with the actual test ID you want to rerun
        rerunTest(testId);
    }

    private static void rerunTest(String testId) {
        CloseableHttpClient httpClient = HttpClients.createDefault();

        HttpPost postRequest = new HttpPost(TEST_RERUN_ENDPOINT + "?testLocator=" + testId);
        postRequest.setHeader("Content-Type", "application/json");
        postRequest.setHeader("Authorization", AUTH_HEADER_VALUE);

        try {
            httpClient.execute(postRequest);
            System.out.println("Test rerun request sent for test ID: " + testId);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                httpClient.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}

testng -Dallure.results.path=allure-results MyTestSuite.xml
testng -listener reportng.EmailableReporter MyTestSuite.xml
ExtentReports生成测试报告；


1、对象类别：
    Entity(实体):直接与数据库表进行映射，持久化CRUD
    DTO(数据传输对象):在应用程序的不同层次之间传输的数据的对象
    VO(视图对象):用户界面上的数据对象，视图所需所有数据（日期格式化、图片链接等）
    PO(持久化对象):
2、myBatis-Plus使用和
@TableName(value = "instability_filter")：MyBatis Plus，指定这个实体类对应的数据库表名
@TableId(value = "id",type = IdType.AUTO)：MyBatis Plus，指定实体类中的字段作为数据库表的主键。value = "id" 表示数据库表的字段名是 id，type = IdType.AUTO 表示主键值是自动生成的。
@TableField(value = "istb_filter")：指定实体类中的字段映射到数据库表的哪个字段

【jvm】
3、jvm调优：
1.确定当前内存使用情况：
    使用 jps 命令查看当前 Java 进程。
    使用 jstat -gc <pid> 查看垃圾回收情况。
    使用 jmap -heap <pid> 查看堆内存使用情况。
2.调整 JVM 启动参数：
    java -Xms512m -Xmx1024m -jar your-application.jar
3.年轻代和老年代：使用 -Xmn 设置年轻代大小，使用 -XX:NewRatio 设置年轻代和老年代的比例。例如：
    java -Xms1024m -Xmx1024m -Xmn256m -XX:NewRatio=2 -jar your-application.jar
4.垃圾回收器：选择并设置垃圾回收器。例如，使用 G1 垃圾回收器：
    java -Xms1024m -Xmx1024m -XX:+UseG1GC -jar your-application.jar
5.每个线程都有自己的栈，用于存储局部变量和方法调用。栈大小可以通过以下参数调整：
    -Xss<size>：设置线程栈的大小。例如，-Xss256k 设置为 256 KB
6.设置对象晋升到老年代前在年轻代的存活次数
    -XX:MaxTenuringThreshold 30

【058】测试平台
多线程执@Test中的方法，
import org.testng.annotations.Test;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ConcurrencyTest {

    @Test(invocationCount = 10, threadPoolSize = 5)
    public void testMethod() {
        // 这里编写测试逻辑
    }

    public static void main(String[] args) {
        ExecutorService executorService = Executors.newFixedThreadPool(10);
        for (int i = 0; i < 10; i++) {
            executorService.submit(new Runnable() {
                @Override
                public void run() {
                    // 这里编写测试逻辑
                }
            });
        }
        executorService.shutdown();
    }
}
【059】
换一个更好的平台来挑战自我；原本想的是早点走，但是公司正好处在最忙的时候，
又有员工离职，我才呆到现在9月底大版本全部发布完成；
如果我有幸担任这个职位，你会给我哪些建议?
技能和技术共鸣

1、公司现在做什么项目，公司目前做哪方面测试
2、公司这边测试人员分配比例，或者说测试与开发时间占比


国外开源社区和git官网提出了pull 了一个issue，然后他们帮我解答了这个问题。
最难解决的问题：会什么，找难度最高的。
测开需要的品质和工作内容？
工作是web端还是，能否看见源码
